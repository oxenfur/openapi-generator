/**
 * Auto-generated file, DO NOT MODIFY.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import "reflect-metadata";
import { NextFunction, Request, Response, Router } from "express";
import { StoreApiImplementation } from "../../.";
import { Type } from "class-transformer";
import { plainToInstance } from "class-transformer";
import { IsOptional, IsString, IsBoolean, IsEmail, IsNumber, IsDate } from "class-validator";
import { validationMiddleware } from "../common";
import type {
  Order,
} from '../models';

const router = Router();

export type DeleteOrderOperationResponse =
    {
      code: 400,
      response: any,
    } |
    {
      code: 404,
      response: any,
    };

export interface DeleteOrderResponse extends Response<
    any |
    any
> { };

class DeleteOrderRequestPathParams {
    @IsString()
    
    
    
    
    
    orderId: string;
}



export interface DeleteOrderRequest extends Request<
  // path params
  DeleteOrderRequestPathParams,
  // response body reference, should match response
    any |
      any
  ,
  // body params
  {},
  // query params
  {}
> { };

export type GetInventoryOperationResponse =
    {
      code: 200,
      response: { [key: string]: number; },
    };

export interface GetInventoryResponse extends Response<
    { [key: string]: number; }
> { };




export interface GetInventoryRequest extends Request<
  // path params
  {},
  // response body reference, should match response
    { [key: string]: number; }
  ,
  // body params
  {},
  // query params
  {}
> { };

export type GetOrderByIdOperationResponse =
    {
      code: 200,
      response: Order,
    } |
    {
      code: 400,
      response: any,
    } |
    {
      code: 404,
      response: any,
    };

export interface GetOrderByIdResponse extends Response<
    Order |
    any |
    any
> { };

class GetOrderByIdRequestPathParams {
    
    
    
    
    
    
    orderId: number;
}



export interface GetOrderByIdRequest extends Request<
  // path params
  GetOrderByIdRequestPathParams,
  // response body reference, should match response
    Order |
      any |
      any
  ,
  // body params
  {},
  // query params
  {}
> { };

export type PlaceOrderOperationResponse =
    {
      code: 200,
      response: Order,
    } |
    {
      code: 400,
      response: any,
    };

export interface PlaceOrderResponse extends Response<
    Order |
    any
> { };


class PlaceOrderRequestBodyParams {
    
    
    
    
    
    @IsOptional()
    id?: number;
    
    
    
    
    
    @IsOptional()
    petId?: number;
    
    
    
    
    
    @IsOptional()
    quantity?: number;
    
    
    
    
    
    @IsOptional()
    shipDate?: String;
    @IsString()
    
    
    
    
    @IsOptional()
    status?: StatusEnum;
    
    
    @IsBoolean()
    
    
    @IsOptional()
    complete?: Boolean;
}


export interface PlaceOrderRequest extends Request<
  // path params
  {},
  // response body reference, should match response
    Order |
      any
  ,
  // body params
  PlaceOrderRequestBodyParams,
  // query params
  {}
> { };



// Operations Begin

/**
  * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
  * Delete purchase order by ID
  */
router.delete(
  `/store/order/{orderId}`,
  validationMiddleware({
    body: undefined,
    query: undefined,
    params: DeleteOrderRequestPathParams
  }) as any,
  async (request: DeleteOrderRequest, response: DeleteOrderResponse, next: NextFunction) => {
    // set request to be typed correctly. eg if query string has a number parameter, coerce it to number
    request.body = request.body;
    request.query = request.query;
    request.params = plainToInstance(DeleteOrderRequestPathParams, request.params);

    const operationResponse: DeleteOrderOperationResponse  = await StoreApiImplementation.DeleteOrder(request);
    response.status(operationResponse.code).send(operationResponse.response);
  }
);


/**
  * Returns a map of status codes to quantities
  * Returns pet inventories by status
  */
router.get(
  `/store/inventory`,
  validationMiddleware({
    body: undefined,
    query: undefined,
    params: undefined
  }) as any,
  async (request: GetInventoryRequest, response: GetInventoryResponse, next: NextFunction) => {
    // set request to be typed correctly. eg if query string has a number parameter, coerce it to number
    request.body = request.body;
    request.query = request.query;
    request.params = request.params;

    const operationResponse: GetInventoryOperationResponse  = await StoreApiImplementation.GetInventory(request);
    response.status(operationResponse.code).send(operationResponse.response);
  }
);


/**
  * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
  * Find purchase order by ID
  */
router.get(
  `/store/order/{orderId}`,
  validationMiddleware({
    body: undefined,
    query: undefined,
    params: GetOrderByIdRequestPathParams
  }) as any,
  async (request: GetOrderByIdRequest, response: GetOrderByIdResponse, next: NextFunction) => {
    // set request to be typed correctly. eg if query string has a number parameter, coerce it to number
    request.body = request.body;
    request.query = request.query;
    request.params = plainToInstance(GetOrderByIdRequestPathParams, request.params);

    const operationResponse: GetOrderByIdOperationResponse  = await StoreApiImplementation.GetOrderById(request);
    response.status(operationResponse.code).send(operationResponse.response);
  }
);


/**
  * Place an order for a pet
  */
router.post(
  `/store/order`,
  validationMiddleware({
    body: PlaceOrderRequestBodyParams,
    query: undefined,
    params: undefined
  }) as any,
  async (request: PlaceOrderRequest, response: PlaceOrderResponse, next: NextFunction) => {
    // set request to be typed correctly. eg if query string has a number parameter, coerce it to number
    request.body = plainToInstance(PlaceOrderRequestBodyParams, request.body);
    request.query = request.query;
    request.params = request.params;

    const operationResponse: PlaceOrderOperationResponse  = await StoreApiImplementation.PlaceOrder(request);
    response.status(operationResponse.code).send(operationResponse.response);
  }
);

// Operations End

export { router as StoreApiRouter };

