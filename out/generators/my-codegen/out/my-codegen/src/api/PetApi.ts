/**
 * Auto-generated file, DO NOT MODIFY.
 */

/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import "reflect-metadata";
import { NextFunction, Request, Response, Router } from "express";
import { PetApiImplementation } from "../../api";
import { Type } from "class-transformer";
import { plainToInstance } from "class-transformer";
import { IsOptional, IsString, IsBoolean, IsEmail, IsNumber, IsDate } from "class-validator";
import { validationMiddleware } from "../runtime";
import type {
  Any,
  ApiResponse,
  Number,
  Pet,
} from '../models';

const router = Router();

export type AddPetOperationResponse =
    {
      code: 405,
      response: any,
    };

export interface AddPetResponse extends Response<
    any
> { };


class AddPetRequestBodyParams {
    
    
    
    
    
    @IsOptional()
    id?: Number;
    
    
    
    
    
    @IsOptional()
    category?: Category;
    @IsString()
    
    
    
    
    
    name: String;
    
    
    
    
    
    
    photoUrls: Array<String>;
    
    
    
    
    
    @IsOptional()
    tags?: Array<Tag>;
    @IsString()
    
    
    
    
    @IsOptional()
    status?: StatusEnum;
}


export interface AddPetRequest extends Request<
  // path params
  {},
  // response body reference, should match response
    any
  ,
  // body params
  AddPetRequestBodyParams,
  // query params
  {}
> { };

export type DeletePetOperationResponse =
    {
      code: 400,
      response: any,
    };

export interface DeletePetResponse extends Response<
    any
> { };

class DeletePetRequestPathParams {
    
    
    
    
    
    
    petId: Number;
}



export interface DeletePetRequest extends Request<
  // path params
  DeletePetRequestPathParams,
  // response body reference, should match response
    any
  ,
  // body params
  {},
  // query params
  {}
> { };

export type FindPetsByStatusOperationResponse =
    {
      code: 200,
      response: Array<Pet>,
    } |
    {
      code: 400,
      response: any,
    };

export interface FindPetsByStatusResponse extends Response<
    Array<Pet> |
    any
> { };



class FindPetsByStatusRequestQueryParams {
    
    
    
    
    
    
    status: Array<StatusEnum>;
}

export interface FindPetsByStatusRequest extends Request<
  // path params
  {},
  // response body reference, should match response
    Array<Pet> |
      any
  ,
  // body params
  {},
  // query params
  FindPetsByStatusRequestQueryParams
> { };

export type FindPetsByTagsOperationResponse =
    {
      code: 200,
      response: Array<Pet>,
    } |
    {
      code: 400,
      response: any,
    };

export interface FindPetsByTagsResponse extends Response<
    Array<Pet> |
    any
> { };



class FindPetsByTagsRequestQueryParams {
    
    
    
    
    
    
    tags: Array<String>;
}

export interface FindPetsByTagsRequest extends Request<
  // path params
  {},
  // response body reference, should match response
    Array<Pet> |
      any
  ,
  // body params
  {},
  // query params
  FindPetsByTagsRequestQueryParams
> { };

export type GetPetByIdOperationResponse =
    {
      code: 200,
      response: Pet,
    } |
    {
      code: 400,
      response: any,
    } |
    {
      code: 404,
      response: any,
    };

export interface GetPetByIdResponse extends Response<
    Pet |
    any |
    any
> { };

class GetPetByIdRequestPathParams {
    
    
    
    
    
    
    petId: Number;
}



export interface GetPetByIdRequest extends Request<
  // path params
  GetPetByIdRequestPathParams,
  // response body reference, should match response
    Pet |
      any |
      any
  ,
  // body params
  {},
  // query params
  {}
> { };

export type UpdatePetOperationResponse =
    {
      code: 400,
      response: any,
    } |
    {
      code: 404,
      response: any,
    } |
    {
      code: 405,
      response: any,
    };

export interface UpdatePetResponse extends Response<
    any |
    any |
    any
> { };


class UpdatePetRequestBodyParams {
    
    
    
    
    
    @IsOptional()
    id?: Number;
    
    
    
    
    
    @IsOptional()
    category?: Category;
    @IsString()
    
    
    
    
    
    name: String;
    
    
    
    
    
    
    photoUrls: Array<String>;
    
    
    
    
    
    @IsOptional()
    tags?: Array<Tag>;
    @IsString()
    
    
    
    
    @IsOptional()
    status?: StatusEnum;
}


export interface UpdatePetRequest extends Request<
  // path params
  {},
  // response body reference, should match response
    any |
      any |
      any
  ,
  // body params
  UpdatePetRequestBodyParams,
  // query params
  {}
> { };

export type UpdatePetWithFormOperationResponse =
    {
      code: 405,
      response: any,
    };

export interface UpdatePetWithFormResponse extends Response<
    any
> { };

class UpdatePetWithFormRequestPathParams {
    
    
    
    
    
    
    petId: Number;
}



export interface UpdatePetWithFormRequest extends Request<
  // path params
  UpdatePetWithFormRequestPathParams,
  // response body reference, should match response
    any
  ,
  // body params
  {},
  // query params
  {}
> { };

export type UploadFileOperationResponse =
    {
      code: 200,
      response: ApiResponse,
    };

export interface UploadFileResponse extends Response<
    ApiResponse
> { };

class UploadFileRequestPathParams {
    
    
    
    
    
    
    petId: Number;
}



export interface UploadFileRequest extends Request<
  // path params
  UploadFileRequestPathParams,
  // response body reference, should match response
    ApiResponse
  ,
  // body params
  {},
  // query params
  {}
> { };



// Operations Begin

/**
  * Add a new pet to the store
  */
router.post(
  `/pet`,
  validationMiddleware({
    body: AddPetRequestBodyParams,
    query: undefined,
    params: undefined
  }) as any,
  async (request: AddPetRequest, response: AddPetResponse, next: NextFunction) => {
    // set request to be typed correctly. eg if query string has a number parameter, coerce it to number
    request.body = plainToInstance(AddPetRequestBodyParams, request.body);
    request.query = request.query;
    request.params = request.params;

    const operationResponse: AddPetOperationResponse  = await PetApiImplementation.AddPet(request);
    response.status(operationResponse.code).send(operationResponse.response);
  }
);


/**
  * Deletes a pet
  */
router.delete(
  `/pet/{petId}`,
  validationMiddleware({
    body: undefined,
    query: undefined,
    params: DeletePetRequestPathParams
  }) as any,
  async (request: DeletePetRequest, response: DeletePetResponse, next: NextFunction) => {
    // set request to be typed correctly. eg if query string has a number parameter, coerce it to number
    request.body = request.body;
    request.query = request.query;
    request.params = plainToInstance(DeletePetRequestPathParams, request.params);

    const operationResponse: DeletePetOperationResponse  = await PetApiImplementation.DeletePet(request);
    response.status(operationResponse.code).send(operationResponse.response);
  }
);


/**
  * Multiple status values can be provided with comma separated strings
  * Finds Pets by status
  */
router.get(
  `/pet/findByStatus`,
  validationMiddleware({
    body: undefined,
    query: FindPetsByStatusRequestQueryParams,
    params: undefined
  }) as any,
  async (request: FindPetsByStatusRequest, response: FindPetsByStatusResponse, next: NextFunction) => {
    // set request to be typed correctly. eg if query string has a number parameter, coerce it to number
    request.body = request.body;
    request.query = plainToInstance(FindPetsByStatusRequestQueryParams, request.query);
    request.params = request.params;

    const operationResponse: FindPetsByStatusOperationResponse  = await PetApiImplementation.FindPetsByStatus(request);
    response.status(operationResponse.code).send(operationResponse.response);
  }
);


/**
  * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  * Finds Pets by tags
  */
router.get(
  `/pet/findByTags`,
  validationMiddleware({
    body: undefined,
    query: FindPetsByTagsRequestQueryParams,
    params: undefined
  }) as any,
  async (request: FindPetsByTagsRequest, response: FindPetsByTagsResponse, next: NextFunction) => {
    // set request to be typed correctly. eg if query string has a number parameter, coerce it to number
    request.body = request.body;
    request.query = plainToInstance(FindPetsByTagsRequestQueryParams, request.query);
    request.params = request.params;

    const operationResponse: FindPetsByTagsOperationResponse  = await PetApiImplementation.FindPetsByTags(request);
    response.status(operationResponse.code).send(operationResponse.response);
  }
);


/**
  * Returns a single pet
  * Find pet by ID
  */
router.get(
  `/pet/{petId}`,
  validationMiddleware({
    body: undefined,
    query: undefined,
    params: GetPetByIdRequestPathParams
  }) as any,
  async (request: GetPetByIdRequest, response: GetPetByIdResponse, next: NextFunction) => {
    // set request to be typed correctly. eg if query string has a number parameter, coerce it to number
    request.body = request.body;
    request.query = request.query;
    request.params = plainToInstance(GetPetByIdRequestPathParams, request.params);

    const operationResponse: GetPetByIdOperationResponse  = await PetApiImplementation.GetPetById(request);
    response.status(operationResponse.code).send(operationResponse.response);
  }
);


/**
  * Update an existing pet
  */
router.put(
  `/pet`,
  validationMiddleware({
    body: UpdatePetRequestBodyParams,
    query: undefined,
    params: undefined
  }) as any,
  async (request: UpdatePetRequest, response: UpdatePetResponse, next: NextFunction) => {
    // set request to be typed correctly. eg if query string has a number parameter, coerce it to number
    request.body = plainToInstance(UpdatePetRequestBodyParams, request.body);
    request.query = request.query;
    request.params = request.params;

    const operationResponse: UpdatePetOperationResponse  = await PetApiImplementation.UpdatePet(request);
    response.status(operationResponse.code).send(operationResponse.response);
  }
);


/**
  * Updates a pet in the store with form data
  */
router.post(
  `/pet/{petId}`,
  validationMiddleware({
    body: undefined,
    query: undefined,
    params: UpdatePetWithFormRequestPathParams
  }) as any,
  async (request: UpdatePetWithFormRequest, response: UpdatePetWithFormResponse, next: NextFunction) => {
    // set request to be typed correctly. eg if query string has a number parameter, coerce it to number
    request.body = request.body;
    request.query = request.query;
    request.params = plainToInstance(UpdatePetWithFormRequestPathParams, request.params);

    const operationResponse: UpdatePetWithFormOperationResponse  = await PetApiImplementation.UpdatePetWithForm(request);
    response.status(operationResponse.code).send(operationResponse.response);
  }
);


/**
  * uploads an image
  */
router.post(
  `/pet/{petId}/uploadImage`,
  validationMiddleware({
    body: undefined,
    query: undefined,
    params: UploadFileRequestPathParams
  }) as any,
  async (request: UploadFileRequest, response: UploadFileResponse, next: NextFunction) => {
    // set request to be typed correctly. eg if query string has a number parameter, coerce it to number
    request.body = request.body;
    request.query = request.query;
    request.params = plainToInstance(UploadFileRequestPathParams, request.params);

    const operationResponse: UploadFileOperationResponse  = await PetApiImplementation.UploadFile(request);
    response.status(operationResponse.code).send(operationResponse.response);
  }
);

// Operations End

export { router as PetApiRouter };

